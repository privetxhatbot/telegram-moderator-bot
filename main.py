import os
import json
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîê –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7934050267:AAGteJFHVm1108ffap66G84dXIsVQUWSfUo"
ADMIN_IDS = [7934050267]

# üìÅ –§–∞–π–ª —Å –ø–ª–æ—Ö–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
BAD_WORDS_FILE = "bad_words.json"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
def load_bad_words():
    try:
        with open(BAD_WORDS_FILE, "r") as f:
            return set(json.load(f))
    except Exception:
        return set()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
def save_bad_words(bad_words):
    with open(BAD_WORDS_FILE, "w") as f:
        json.dump(list(bad_words), f)

# üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤
bad_words = load_bad_words()

# üëÆ‚Äç‚ôÄÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–∞ –∏ —Å—Å—ã–ª–æ–∫
def moderate(update: Update, context: CallbackContext):
    message = update.message.text.lower()
    if any(word in message for word in bad_words) or "http" in message or "t.me" in message:
        try:
            update.message.delete()
            logger.info("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", message)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %s", e)

# üü¢ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def start(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —á–∞—Ç.")

def add_word(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if context.args:
        word = context.args[0].lower()
        bad_words.add(word)
        save_bad_words(bad_words)
        update.message.reply_text(f"‚ûï –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /add")

def remove_word(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if context.args:
        word = context.args[0].lower()
        bad_words.discard(word)
        save_bad_words(bad_words)
        update.message.reply_text(f"üóë –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /remove")

def list_words(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if bad_words:
        update.message.reply_text("üìÑ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(sorted(bad_words)))
    else:
        update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_word))
    dp.add_handler(CommandHandler("remove", remove_word))
    dp.add_handler(CommandHandler("list", list_words))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, moderate))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
