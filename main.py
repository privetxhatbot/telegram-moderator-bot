import json
import logging
import os
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏
BAD_WORDS_FILE = "bad_words.json"

# –¢–≤–æ–π Telegram user ID ‚Äî —Ç—ã –∞–¥–º–∏–Ω
ADMIN_IDS = [7934050267]

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("BOT_TOKEN", "7934050267:AAGteJFHVm1108ffap66G84dXIsVQUWSfUo")

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞–º–∏
def load_bad_words():
    try:
        with open(BAD_WORDS_FILE, "r") as f:
            return set(json.load(f))
    except:
        return set()

def save_bad_words(bad_words):
    with open(BAD_WORDS_FILE, "w") as f:
        json.dump(list(bad_words), f)

bad_words = load_bad_words()

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def moderate(update: Update, context: CallbackContext):
    message = update.message.text.lower()
    if any(word in message for word in bad_words):
        try:
            update.message.delete()
            logger.info("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", update.message.text)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %s", e)

# –ö–æ–º–∞–Ω–¥—ã
def start(update: Update, context: CallbackContext):
    update.message.reply_text("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç!")

def add_word(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if context.args:
        word = context.args[0].lower()
        bad_words.add(word)
        save_bad_words(bad_words)
        update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–Ω-–ª–∏—Å—Ç.")
    else:
        update.message.reply_text("‚ùóÔ∏è–£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

def remove_word(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if context.args:
        word = context.args[0].lower()
        bad_words.discard(word)
        save_bad_words(bad_words)
        update.message.reply_text(f"üóë –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–Ω-–ª–∏—Å—Ç–∞.")
    else:
        update.message.reply_text("‚ùóÔ∏è–£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

def list_words(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    if bad_words:
        words_list = "\n".join(f"‚Ä¢ {w}" for w in sorted(bad_words))
        update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{words_list}")
    else:
        update.message.reply_text("üì™ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_word))
    dp.add_handler(CommandHandler("remove", remove_word))
    dp.add_handler(CommandHandler("listwords", list_words))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, moderate))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
